// Problem statement :
//     Return the size of largest BST in the given binary tree.

 // STRATEGY : 
//  1) Min In Subtree
//  2) Max In Subtree
//  3) Subtree size_
//  4) size of largest BST
//  5) isBST

#include<iostream>
#include<climits>
using namespace std;

struct node
{
    int data;
    struct node*left ;
    struct node*right  ;

    node(int val)
    {
        data = val;
        left = NULL;
        right =NULL;

    }
};

struct info
{
    int size;
    int max;
    int min;
    int ans;
    bool BST;

};

info largestBSTinBT(node*root)
{
    if(root ==NULL)
    {
        return {0,INT_MIN,INT_MAX,0,true};

    }
    if(root->left == NULL && root->right == NULL)
    {
        return {1,root->data,root->data,1,true};
    }

    info leftinfo = largestBSTinBT(root->left);
    info rightinfo = largestBSTinBT(root->right);

    info curr;
    curr.size = (1 + leftinfo.size + rightinfo.size);
    if(leftinfo.BST && rightinfo.BST && leftinfo.max < root->data && rightinfo.min > root->data)
    {
        curr.min = min(leftinfo.min,min(rightinfo.min,root->data));
        curr.max = max(rightinfo.max,max(leftinfo.max,root->data));

        curr.ans = curr.size;
        curr.BST = true;
        return curr;
    }

    curr.ans = max(leftinfo.ans,rightinfo.ans);
    curr.BST = false;
    return curr;


}

int main()
{
    /*
                 5
                /  \
               3    6
              / \    
             2   4    
    */
    struct node*root = new node(5);
    root->left = new node(3);
    root->right = new node(6);
    root->left->left = new node(2);
    root->left->right = new node(4);

    cout<<"Largest BST in BT : "<<largestBSTinBT(root).ans<<endl;


    return 0;
}
