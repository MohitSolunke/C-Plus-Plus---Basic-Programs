// Zigzag Traversal In Binary Search Tree :-

#include<iostream>
#include<stack>
using namespace std;

struct node
{
    int data;
    struct node*left ;
    struct node*right  ;

    node(int val)
    {
        data = val;
        left = NULL;
        right =NULL;

    }
};

void zidzagTraversal(node* root)
{
    if(root == NULL)
    {
        return ;
    }
    bool lefttoright = true;
    stack<node*>currlevel;
    stack<node*>nextlevel;

    currlevel.push(root);
    while(! currlevel.empty())
    {
        node*temp = currlevel.top();
        currlevel.pop();
        if(temp)
        {
            cout<<temp->data<<" ";
        

        if(lefttoright)
        {
            if(temp->left)
            {
                nextlevel.push(temp->left);
            }
            if(temp->right)
            {
                nextlevel.push(temp->right);
            }
        }
        // right to left
        else
        {
            if(temp->right)
            {
                nextlevel.push(temp->right);
            }
            if(temp->left)
            {
                nextlevel.push(temp->left);
            }
        }

        }
        if(currlevel.empty())
        {
            lefttoright = !lefttoright;
            swap(currlevel,nextlevel);
        }



    }
}

int main()
{
    struct node*root = new node(12);
    root->left = new node(9);
    root->right = new node(15);
    root->left->left = new node(5);
    root->left->right = new node(10);

    //test
    zidzagTraversal(root);
    cout<<endl;
    return 0;

}
// Time Complexity: O(n)
