// Build the tree from Preorder and Inorder

#include<iostream>
using namespace std;

struct Node
{
    int data;
    struct Node*left;
    struct Node*right;

    Node(int val)
    {
        data = val;
        left = NULL;
        right = NULL;
    }
};
int search(int inorder[],int start,int end,int curr)
{
    for(int i=0;i<end;i++)
    {
        if(curr == inorder[i])
        {
            return i;
        }
    }
    return -1;

}

Node* Buildtree(int preorder[],int inorder[],int start,int end)
{
    static int idx = 0;
    if(start > end)
    {
        return NULL;
    }

    int curr = preorder[idx];
    idx++;

    Node*node = new Node(curr);
    if(start ==end)
    {
        return node;
    }

    int pos = search(inorder,start,end,curr);
    node->left = Buildtree(preorder,inorder,start,pos-1);
    node->right = Buildtree(preorder,inorder,pos+1,end);
    
}

void printinorder(Node*root)
{
    printinorder(root->left);
    cout<<root->data<<" ";
    printinorder(root->right); 
}
int main()
{
    int preorder[] ={1,2,4,3,5};
    int inorder[] = {4,2,1,5,3};

    Node* root = Buildtree(preorder,inorder,0,4);
    printinorder(root);
    return 0;
}
