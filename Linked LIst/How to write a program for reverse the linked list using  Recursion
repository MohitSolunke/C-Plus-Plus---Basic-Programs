#include<iostream>
using namespace std;

class node
{
    public:
       int data;
       node* next;

    node(int val)
    {
        data = val;
        next = NULL;
    }
};
void insertatTail(node* &head,int val)
{
    node* n=new node(val);
    if(head == NULL)
    {
        head =n;
        return ;
    }
    node*temp=head;
    while(temp->next!=0)
    {
        temp=temp->next;
    }
    temp->next=n;

}
void deletenode(node* &head,int val)
{
    if(head==NULL)
    {
        return;
    }
    if(head->next ==NULL)
    {
        node *todelete = head;
        head=head->next;
        delete(todelete);
        return;
    }
    node*temp=head;
    while(temp->next->data!=val){
        temp=temp->next;
    }
    node* todelete = temp->next;

    temp->next=temp->next->next;
    delete todelete;

}
void deleteathead(node* &head)
{
    node*todelete = head;
    head =head->next;

    delete(todelete);
}
node*reveerseRecursive(node*&head)
{
    if(head == NULL || head->next ==NULL)
    {
        return head;
    }
    node*newhead = reveerseRecursive(head->next);
    head->next->next=head;
    head->next=NULL;

    return newhead;
}
void display(node* head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;

    }
    cout<<"NULL"<<endl;
}

int main()
{
    node*head1= NULL;
    node*head2=NULL;
    insertatTail(head1,1);
    insertatTail(head1,2);
    insertatTail(head1,3);
    insertatTail(head1,4);
     insertatTail(head1,5);
    
    display(head1);
    node* newhead = reverseRecursive(head,k);
    display(newhead);

    return 0;

}
